type Query {
  getTeam(teamId: String!): Team
  getAllTeams: [Team]!
}

type Mutation {
  createTeam(input: CreateTeamInput!): Team
  addPlayer(input: PlayerInput!): Team
  updateTeam(input: TeamInput!): Team
  removePlayer(input: PlayerInput!): Team
}

input CreateTeamInput {
  name: String!
  captainId: String!
}

input PlayerInput {
  userId: String!
  teamId: String!
}

input TeamInput {
  name: String
  captainId: String
  roster: [UserInput]
  feeStatus: TeamFeeStatus
  division: Division
}

type Team {
  id: String!
  name: String!
  captain: User!
  roster: [User]
  rosterMax: Int!
  rosterMin: Int!
  feeStatus: TeamFeeStatus
  division: Division
  wins: Int
  losses: Int
  draws: Int
  pointsFor: Int
  pointsAgainst: Int
  gamesHomeTeam: [Game]
  gamesAwayTeam: [Game]
  leagues: [League]
  createdAt: String
  createdBy: User
  modifiedAt: String
}

enum Division {
  D1
  D2
  D3
}

# Prisma ORM does not currently support compoosite types for PostgreSQL
# Movinfg these to top-level types on Team object
# type TeamStandings {
#   division: Int
#   wins: Int
#   losses: Int
#   draws: Int
#   pointsFor: Int
#   pointsAgainst: Int
# }

enum TeamFeeStatus {
  UNPAID
  PAID
  PARTIAL
  REFUNDED
}
