type Query {
  getUserById(userId: String!): User!
  getUserByEmail(email: String!): User!
  getAllUsers: [User]!
}

type Mutation {
  signUp(email: String!): ID!
  updateUser(userId: String!, userInput: UserInput): User!
  deleteUser(userId: String!): Boolean!
}

input UserInput {
  # email: String
  firstName: String
  lastName: String
  gender: UserGender
  status: UserAccountStatus
  phone: String
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
  birthDate: String
  skillLevel: UserSkill
  captainInterest: Boolean
}

enum UserSkill {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum UserAccountStatus {
  INVITED
  JOINED
  DECLINED
}

enum UserGender {
  MALE
  FEMALE
  OTHER
}

enum PreferredPosition {
  GOALIE
  DEFENDER
  MIDFIELDER
  STRIKER
  WINGER
}

enum UserType {
  PLAYER
  CAPTAIN
  ADMIN
}

type User {
  id: String!
  firstName: String
  lastName: String
  gender: UserGender
  status: UserAccountStatus
  externalUserId: String!
  email: String!
  phone: String
  address1: String
  address2: String
  city: String
  state: String
  zip: Int
  birthDate: String
  preferredPosition: PreferredPosition
  skillLevel: UserSkill
  captainInterest: Boolean
  userType: UserType
  inviteOtpCode: String
  teams: [Team]
  # loginsCount: Int
  # lastLogin: String
  # createdBy: User
  createdAt: String
  modifiedAt: String
}
